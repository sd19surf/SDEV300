<?php
function isLoginSessionExpired() {
	$login_session_duration = 1800; 
	$current_time = time(); 
	if(isset($_SESSION['LoggedInTime']) and isset($_SESSION["Username"])){  
		if(((time() - $_SESSION['LoggedInTime']) > $login_session_duration)){ 
			return true; 
		} 
	}
	return false;
}

function selectAllProducts() {

      $sql = "SELECT ProductID,ProductName,ProductPrice,ProductPicture FROM product";
      $mysqli = connectdb();
      $rows=array();

      if ($result = $mysqli->query($sql)){
         
	    while($r = $result->fetch_assoc()){
              $rows[] = $r;
            }
       }
       $close = $mysqli->close();

    return $rows;
                     

}

function selectProductsByID($idNumber) {

      $productid = stripslashes($idNumber);

      $sql = "SELECT ProductID,ProductName,ProductPrice,ProductPicture FROM product WHERE ProductID = '$productid'";

      $mysqli = connectdb();

      if ($result = $mysqli->query($sql)){
         
	    $r = $result->fetch_assoc();
            
       }
       $close = $mysqli->close();

    return $r;
                     

}

// Checks user and sets CustomerID and creates one if not in database.

function updatePurchaseAndUser(){


        $username = $_SESSION['Username'];
        $email = $_SESSION['EmailAddress'];
	$password = $_SESSION['Password'];

	$firstname = $_POST['firstname'];
	$lastname = $_POST['lastname'];
	$streetaddress = $_POST['address'];
        $city = $_POST['city'];
        $state = $_POST['state'];
        $zipcode = $_POST['zipcode'];


  // check if there is an id created if not make one
   $mysqli = connectdb();
   $customerid = 0;
   $sql = "SELECT CustomerID from user WHERE Username = '$username'";
   if ($result = $mysqli->query($sql)){
       $custid = $result->fetch_assoc();
   }


   if ($custid['CustomerID'] != 0){
       $customerid = $custid['CustomerID'];
   }else{
	$sql = "SELECT MAX(CustomerID) As NewId from user";
   	   if ($result = $mysqli->query($sql)){
      		 $custid = $result->fetch_assoc();
		 $customerid = $custid['NewId'] + 1;
		 
	   }
     
   }	



  // after making an id use the form data to load into the database

    $insertTheUserData = insertUser($username, $email, $customerid, $password, $firstname, $lastname, $streetaddress, $city, $state, $zipcode);

    $insertThePurchase = insertPurchase($customerid);

   $close = $mysqli->close();
}


function insertUser($username, $email, $customerid, $password, $firstname, $lastname, $streetaddress, $city, $state, $zipcode){


    $sql = "INSERT INTO user (Username, Email, CustomerID, Password, FirstName, LastName, StreetAddress, City, State, Zipcode) VALUES ('$username', '$email', '$customerid', '$password', '$firstname', '$lastname', '$streetaddress', '$city', '$state', '$zipcode')";
   
    $mysqli = connectdb();
   
    $success = "false";

      if ($result = $mysqli->query($sql)){
         
	   $success = "true";
      }
       $close = $mysqli->close();
    
     return $success;
 }



function insertPurchase($customerid) {

   $mysqli = connectdb();

    $allitems = $mysqli->real_escape_string(serialize($_POST["albumSelection"]));
     // decided against total cost since it's not in the requirements
 
    
    $sql = "INSERT INTO purchase (CustomerID, AllItems, PurchaseDate) VALUES ('$customerid','$allitems','CURDATE()')";
   
   
    $success = "false";

      if ($result = $mysqli->query($sql) or trigger_error("Query Failed! SQL: $sql - Error: ".mysqli_error(), E_USER_ERROR)){
         
	   $success = "true";
      }
       $close = $mysqli->close();
       return $success;
}


// Grabs the highest Product ID number

function selectMaxProdIdNumber() {

    $sql = "SELECT MAX(ProductID) As NewProdID FROM product";
    $max_Number = 0;
    $mysqli = connectdb();

      if ($result = $mysqli->query($sql)){
         
	   $max_Number = $result->fetch_assoc();
      }
       $close = $mysqli->close();

	echo $max_Number["NewProdID"]."<br>";

    return $max_Number;
}     

//Checks the product into the database duplicates don't matter

function vaildateProduct($type){

       // could reuse here for updating/deleting/adding
       // using $type to determine what to do with the product

        $productid = $_POST['ProdID'];
        $productname = $_POST['ProductName'];
        $productpicture = $_POST['ProductPicture'];
        $productprice = $_POST['ProductPrice'];


	$product = new ProductClass($productid,$productname,$productpicture,$productprice);

        switch ($type) {
         case "delete":
               $result = deleteProduct($product);
               break;
         case "insert":
	       $result = insertProduct($product);
               break;
         case "update":
               $result = updateProduct($product);
               break;
         }

}

function insertProduct($product){

    $productid = $product->getProductid();
    $productname = $product->getProductname();
    $productpicture = $product->getProductpicture();
    $productprice = $product->getProductprice();


    $sql = "INSERT INTO product (ProductID,ProductName,ProductPicture,ProductPrice) VALUES ('$productid','$productname','$productpicture','$productprice')";
   
    $mysqli = connectdb();
   
    $success = "false";

      if ($result = $mysqli->query($sql)){
         
	   $success = "true";
      }
       $close = $mysqli->close();
       return $success;
}

function deleteProduct($product){

    $productid = $product->getProductid();
  
    $sql = "DELETE FROM product WHERE ProductID = '$productid'";
   
    $mysqli = connectdb();
   
    $success = "false";

      if ($result = $mysqli->query($sql)){
         
	   $success = "true";
      }
       $close = $mysqli->close();
}



function updateProduct($product){

    $productid = $product->getProductid();
    $productname = $product->getProductname();
    //$productpicture = $product->getProductpicture(); not updating the picture owner can add new product instead
    $productprice = $product->getProductprice();


    $sql = "UPDATE product
            SET ProductName = '$productname',
		ProductPrice = '$productprice'
            WHERE ProductID = $productid";
   
    $mysqli = connectdb();
   
    $success = "false";

      if ($result = $mysqli->query($sql)){
         
	   $success = "true";
      }
       $close = $mysqli->close();
       echo $success;

}

// connects to the database
function connectdb() {
// Put this in the header to keep the database session alive as the user or admin shops or edits
// I would normally move this information to a file called config.ini in a folder below root but I included it for ease of grading.

$dbhost = "localhost"; // this will ususally be 'localho st', but can sometimes differ
$dbname = "SDEV_STORE"; // the name of the database that you are going to use for this project
$dbuser = "sdev_owner"; // the username that you created, or were given, to access your database
$dbpass = "sdev300"; // the password that you created, or were given, to access your database

$conn = mysqli_connect($dbhost, $dbuser, $dbpass) or die("MySQL Error: " . mysqli_error());
mysqli_select_db($conn, $dbname) or die("MySQL Error: " . mysqli_error());

return $conn;

}

 // Class to construct Products with getters/setter
class ProductClass {
     // property declaration
     private $ProductID="";
     private $ProductName="";
     private $ProductPrice="";
     private $ProductPicture="";

         // Constructor
     public function __construct($ProductID,$ProductName,$ProductPicture,$ProductPrice)     { 
      $this->productid = $ProductID;
       $this->productname = $ProductName;
       $this->productpicture = $ProductPicture;
       $this->productprice = $ProductPrice;
      }
          // Get methods
     public function getProductId (){
      return $this->productid;     
	}     
      public function getProductname (){ 
      return $this->productname;
     } 
    public function getProductpicture (){ 
     return $this->productpicture;
     } 
    public function getProductprice (){ 
     return $this->productprice;
     }      
 
    // Set methods
      public function setProductId ($value){ 
     $this->productid = $value;
      } 
      public function setProductname ($value){ 
     $this->productname = $value;
      }
      public function setProductpicture ($value){
     $this->productpicture = $value; 
     }    
      public function setProductprice ($value){  
     $this->productprice = $value; 
     }           
  } // End Productclass


 // Class to construct Purchases with getters/setter
class PurchaseClass {
     // property declaration
     private $CustomerID="";
     private $AllItems="";
     private $TotalCost="";
     private $PurchaseDate="";

         // Constructor
     public function __construct($CustomerID,$AllItems,$TotalCost,$PurchaseDate)     { 
      $this->customerid = $CustomerID;
       $this->allitems = $AllItems;
       $this->totalcost = $TotalCost;
       $this->purchasedate = $PurchaseDate;
      }
          // Get methods
     public function getCustomerId (){
      return $this->customerid;     
	}     
      public function getAllitems (){ 
      return $this->allitems;
     } 
    public function getTotalcost (){ 
     return $this->totalcost;
     } 
    public function getPurchasedate (){ 
     return $this->purchasedate;
     }      
 
    // Set methods
      public function setCustomerId ($value){ 
     $this->customerid = $value;
      } 
      public function setAllitems ($value){ 
     $this->allitems = $value;
      }
      public function setTotalcost ($value){
     $this->totalcost = $value; 
     }    
      public function setPurchasedate ($value){  
     $this->purchasedate = $value; 
     }           
  } // End Productclass

 // Class to construct Users with getters/setter
class UserClass {
     // property declaration
     private $CustomerID="";
     private $Username="";
     private $Password="";
     private $Email="";
     private $FirstName="";
     private $LastName="";
     private $StreetAddress="";
     private $City="";
     private $State="";
     private $Zipcode="";
     private $CreditCardNumber="";
     private $CreditCardDate="";

	// Partial Constructor for username and setting ids


         // Full Constructor
     public function __construct($CustomerID,$Username,$Password,$Email,$FirstName,$LastName,$StreetAddress,$City,$State,$Zipcode,$CreditCardNumber,$CreditCardDate)     { 
	$this->customerid = $CustomerID;
	$this->username = $Username;
	$this->password = $Password;
	$this->email = $Email;
	$this->firstname = $FirstName;
	$this->lastname = $Lastname;
	$this->streetaddress = $StreetAddress;
	$this->city = $City;
	$this->state = $State;
	$this->zipcode = $Zipcode;
	$this->creditcardnumber = $CreditCardNumber;
	$this->creditcarddate = $CreditCardDate;


      }
          // Get methods
	public function getCustomerId (){
	  return $this->customerid;     
	}     
	public function getUsername (){ 
	  return $this->username;
	} 
	public function getPassword (){ 
	  return $this->password;
	} 
	public function getEmail (){ 
	  return $this->email;
	}  
	public function getFirstname (){
	  return $this->firstname;
        }
	public function getLastname (){
	  return $this->lastname;
	}
	public function getStreetaddress() {
	  return $this->streetaddress;
	}
	public function getCity () {
	  return $this->city;
	}
	public function getState () {
	  return $this->state;
	}
	public function getZipcode () {
	  return $this->zipcode;
	}
	public function getCreditcardnumber () {
	  return $this->creditcardnumber;
	}
	public function getCreditcarddate () {
	  return $this->creditcarddate;
	} 
 
    // Set methods
	public function setCustomerID ($value){ 
	  $this->customerid = $value;
	} 
	public function setUsername($value){ 
	  $this->username = $value;
	}
	public function setPassword ($value){
	  $this->password = $value; 
	}    
	public function setEmail ($value){  
	  $this->email = $value; 
	}
	public function setFirstname ($value){ 
	  $this->firstname = $value;
	} 
	public function setLastname($value){ 
	  $this->lastname = $value;
	}
	public function setStreetaddress ($value){
	  $this->streetaddress = $value; 
	}    
	public function setCity ($value){  
	  $this->City = $value; 
	}
	public function setState ($value){ 
	  $this->state = $value;
	} 
	public function setZipcode($value){ 
	  $this->zipcode = $value;
	}
	public function setCreditcardnumber ($value){
	  $this->creditcardnumber = $value; 
	}    
	public function setCreditcarddate ($value){  
	  $this->creditcarddate = $value; 
	}

        
  } // End Userclass



?>
